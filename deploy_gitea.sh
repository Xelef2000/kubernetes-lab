#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -euo pipefail

# --- Configuration ---
CONFIG_FILE="config.yaml"
TFVARS_FILE_DEPLOY="gitea.tfvars"
TF_MODULE_PATH_DEPLOY="deploy-gitea" # Subfolder for Gitea deployment

TFVARS_FILE_CONFIG="gitea-config.tfvars"
TF_MODULE_PATH_CONFIG="configure-gitea" # Subfolder for Gitea configuration

HOSTS_FILE="/etc/hosts"
HOSTS_BACKUP_DIR="backup"
HOSTS_START_TAG="### GITEA_LAB_START ###"
HOSTS_END_TAG="### GITEA_LAB_END ###"

# --- Check for dependencies ---
echo "--- Checking for required tools ---"
if ! command -v yq &> /dev/null; then
    echo "Error: yq (YAML processor) is not installed."
    echo "Please install it: https://github.com/mikefarah/yq#install"
    exit 1
fi
if ! command -v jq &> /dev/null; then
    echo "Error: jq (JSON processor) is not installed."
    echo "Please install it: https://jqlang.github.io/jq/download/"
    exit 1
fi
if ! command -v curl &> /dev/null; then
    echo "Error: curl is not installed."
    echo "Please install it."
    exit 1
fi

# --- Check for config file ---
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Error: Configuration file '$CONFIG_FILE' not found."
    exit 1
fi

# --- Helper function for sudo tee -a ---
# This function is used to append lines to a file with sudo
append_to_hosts() {
    echo -e "$1" | sudo tee -a "$HOSTS_FILE" > /dev/null
}

# --- Host File Management ---
echo "--- Managing /etc/hosts ---"

# Backup the hosts file
echo "Backing up $HOSTS_FILE to $HOSTS_BACKUP_DIR/"
mkdir -p "$HOSTS_BACKUP_DIR"
cp "$HOSTS_FILE" "$HOSTS_BACKUP_DIR/hosts.$(date +%Y%m%d_%H%M%S)"

# Clean up existing Gitea lab entries in hosts file
echo "Cleaning up previous Gitea lab entries from $HOSTS_FILE..."
sudo sed -i "/$HOSTS_START_TAG/,/$HOSTS_END_TAG/d" "$HOSTS_FILE"


echo "--- Generating Terraform variables for Gitea deployment ---"

# Read Terraform binary path
TERRAFORM_BINARY=$(yq e '.tf-config.binary_path // "terraform"' "$CONFIG_FILE")
echo "Using Terraform binary: $TERRAFORM_BINARY"

# --- MODIFIED YQ COMMAND TO WRAP ALL VALUES IN QUOTES ---
TF_VARS_CONTENT_DEPLOY=$(yq e '
  .gitea-deployment | to_entries | .[] | "\(.key) = \(.value | to_string | to_json)"
  ,
  .kubernetes | to_entries | .[] | "\(.key) = \(.value | to_string | to_json)"
' "$CONFIG_FILE")

# Add comments to the tfvars file
cat > "$TF_MODULE_PATH_DEPLOY/$TFVARS_FILE_DEPLOY" <<EOF
# This file was automatically generated by deploy_gitea.sh for Gitea deployment
# DO NOT EDIT MANUALLY!

$TF_VARS_CONTENT_DEPLOY
EOF

echo "Generated $TF_MODULE_PATH_DEPLOY/$TFVARS_FILE_DEPLOY:"
cat "$TF_MODULE_PATH_DEPLOY/$TFVARS_FILE_DEPLOY"

# --- Run Terraform Deployment ---
echo "--- Running Terraform in $TF_MODULE_PATH_DEPLOY ---"

pushd "$TF_MODULE_PATH_DEPLOY" > /dev/null

# Initialize Terraform
echo "Running: $TERRAFORM_BINARY init"
if ! $TERRAFORM_BINARY init; then
    echo "Terraform initialization failed."
    popd > /dev/null
    exit 1
fi

# Apply the deployment
echo "Running: $TERRAFORM_BINARY apply -var-file=$TFVARS_FILE_DEPLOY -auto-approve"
if ! $TERRAFORM_BINARY apply -var-file="$TFVARS_FILE_DEPLOY" -auto-approve; then
    echo "Terraform deployment failed."
    popd > /dev/null
    exit 1
fi

popd > /dev/null

echo "--- Gitea deployment via Terraform completed successfully! ---"

# --- Add Gitea to /etc/hosts via Ingress ---
echo "--- Adding Gitea Ingress entry to $HOSTS_FILE ---"

GITEA_URL=$(yq e '.gitea-deployment.gitea_url' "$CONFIG_FILE")
GITEA_NAMESPACE=$(yq e '.gitea-deployment.gitea_namespace' "$CONFIG_FILE")
GITEA_RELEASE_NAME=$(yq e '.gitea-deployment.gitea_release_name' "$CONFIG_FILE")

# The Ingress name is typically the release name for the Gitea Helm chart
GITEA_INGRESS_NAME="${GITEA_RELEASE_NAME}"

echo "Waiting for Gitea Ingress to get an IP address..."
INGRESS_IP=""
MAX_RETRIES=20
RETRY_DELAY=10 # seconds

for i in $(seq 1 $MAX_RETRIES); do
    # Try both 'ip' and 'hostname' fields for robustness across Ingress controllers
    INGRESS_IP=$(kubectl get ingress "$GITEA_INGRESS_NAME" -n "$GITEA_NAMESPACE" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null | tr -d '[:space:]' || \
                 kubectl get ingress "$GITEA_INGRESS_NAME" -n "$GITEA_NAMESPACE" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null | tr -d '[:space:]' || echo "")

    if [ -n "$INGRESS_IP" ]; then
        echo "Ingress IP found: $INGRESS_IP"
        break
    fi
    echo "Attempt $i/$MAX_RETRIES: Ingress IP not yet available. Waiting $RETRY_DELAY seconds..."
    sleep $RETRY_DELAY
done

if [ -z "$INGRESS_IP" ]; then
    echo "Error: Gitea Ingress did not get an IP address within the timeout."
    echo "Please ensure an Ingress Controller is running in your cluster (e.g., 'minikube addons enable ingress' for Minikube)."
    echo "You might need to manually check 'kubectl get ingress $GITEA_INGRESS_NAME -n $GITEA_NAMESPACE' for its status."
    exit 1
fi

HOSTS_ENTRY="$INGRESS_IP $GITEA_URL"

append_to_hosts "$HOSTS_START_TAG"
append_to_hosts "# Gitea Dev Lab Entry - automatically added by deploy_gitea.sh"
append_to_hosts "$HOSTS_ENTRY"
append_to_hosts "$HOSTS_END_TAG"

echo "Added '$HOSTS_ENTRY' to $HOSTS_FILE."
echo "Gitea should now be accessible at http://$GITEA_URL"

echo "--- Host File Update Complete! ---"

# --- Configure Gitea: Get API Token & Deploy Repo ---
echo "--- Configuring Gitea: Getting API Token and Creating Repo ---"

GITEA_ADMIN_USERNAME=$(yq e '.gitea-deployment.gitea_admin_username' "$CONFIG_FILE")
GITEA_ADMIN_PASSWORD=$(yq e '.gitea-deployment.gitea_admin_password' "$CONFIG_FILE") # Sensitive, handle with care

# --- 1. Wait for Gitea to be truly ready ---
echo "Waiting for Gitea application to be fully responsive at $GITEA_URL..."
# CORRECTED Gitea health check URL
GITEA_HEALTH_URL="http://${GITEA_URL}/api/v1/version" # Using API version endpoint as a more reliable health check

MAX_HEALTH_RETRIES=30
HEALTH_RETRY_DELAY=10

for i in $(seq 1 $MAX_HEALTH_RETRIES); do
    if curl -s -f "$GITEA_HEALTH_URL" &> /dev/null; then
        echo "Gitea is responsive."
        break
    fi
    echo "Attempt $i/$MAX_HEALTH_RETRIES: Gitea not yet healthy. Waiting $HEALTH_RETRY_DELAY seconds..."
    sleep $HEALTH_RETRY_DELAY
done

if ! curl -s -f "$GITEA_HEALTH_URL" &> /dev/null; then
    echo "Error: Gitea did not become healthy within the timeout. Cannot get API token."
    exit 1
fi

# --- 3. Generate tfvars for Gitea configuration ---
echo "Generating Terraform variables for Gitea configuration..."

INITIAL_REPO_NAME=$(yq e '.gitea-config.initial_repo_name' "$CONFIG_FILE")
INITIAL_REPO_DESCRIPTION=$(yq e '.gitea-config.initial_repo_description' "$CONFIG_FILE")

cat > "$TF_MODULE_PATH_CONFIG/$TFVARS_FILE_CONFIG" <<EOF
# This file was automatically generated by deploy_gitea.sh for Gitea configuration
# DO NOT EDIT MANUALLY!

gitea_base_url = "http://${GITEA_URL}"
initial_repo_name = "${INITIAL_REPO_NAME}"
initial_repo_description = "${INITIAL_REPO_DESCRIPTION}"
gitea_admin_username = "${GITEA_ADMIN_USERNAME}"
gitea_admin_password = "${GITEA_ADMIN_PASSWORD}"
initial_argocd_repo = "$(yq e '.gitea-config.initial_argocd_repo' "$CONFIG_FILE")"
EOF

echo "Generated $TF_MODULE_PATH_CONFIG/$TFVARS_FILE_CONFIG:"
# For security, avoid printing the tfvars file that contains the token
# cat "$TF_MODULE_PATH_CONFIG/$TFVARS_FILE_CONFIG"

# --- 4. Run Terraform Gitea Configuration ---
echo "--- Running Terraform in $TF_MODULE_PATH_CONFIG ---"

pushd "$TF_MODULE_PATH_CONFIG" > /dev/null

# Initialize Terraform
echo "Running: $TERRAFORM_BINARY init"
if ! $TERRAFORM_BINARY init; then
    echo "Terraform configuration initialization failed."
    popd > /dev/null
    exit 1
fi

# Apply the Gitea configuration
echo "Running: $TERRAFORM_BINARY apply -var-file=$TFVARS_FILE_CONFIG -auto-approve"
if ! $TERRAFORM_BINARY apply -var-file="$TFVARS_FILE_CONFIG" -auto-approve; then
    echo "Terraform Gitea configuration failed."
    popd > /dev/null
    exit 1
fi

popd > /dev/null

echo "--- Gitea configuration via Terraform completed successfully! ---"
echo "Initial Gitea repository '${INITIAL_REPO_NAME}' should now be present."

echo "--- Full Deployment Workflow Complete! ---"