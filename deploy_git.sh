#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -euo pipefail

# --- Configuration ---
CONFIG_FILE="config.yaml"
TFVARS_FILE="pygitserver.tfvars"      # MODIFIED: New tfvars filename
TF_MODULE_PATH="deploy-git"           # MODIFIED: New Terraform module path

HOSTS_FILE="/etc/hosts"
HOSTS_BACKUP_DIR="backup"
HOSTS_START_TAG="### PYGITSERVER_LAB_START ###" # MODIFIED: New tag for hosts file
HOSTS_END_TAG="### PYGITSERVER_LAB_END ###"   # MODIFIED: New tag for hosts file

# --- Check for dependencies ---
echo "--- Checking for required tools ---"
for tool in yq jq curl; do
    if ! command -v "$tool" &> /dev/null; then
        echo "Error: Required tool '$tool' is not installed."
        exit 1
    fi
done

# --- Check for config file ---
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Error: Configuration file '$CONFIG_FILE' not found."
    exit 1
fi

# --- Helper function for sudo tee -a ---
append_to_hosts() {
    echo -e "$1" | sudo tee -a "$HOSTS_FILE" > /dev/null
}

# --- Host File Management ---
echo "--- Managing /etc/hosts ---"
echo "Backing up $HOSTS_FILE to $HOSTS_BACKUP_DIR/"
mkdir -p "$HOSTS_BACKUP_DIR"
cp "$HOSTS_FILE" "$HOSTS_BACKUP_DIR/hosts.$(date +%Y%m%d_%H%M%S)"

echo "Cleaning up previous PyGitServer lab entries from $HOSTS_FILE..."
sudo sed -i "/$HOSTS_START_TAG/,/$HOSTS_END_TAG/d" "$HOSTS_FILE"


echo "--- Generating Terraform variables for PyGitServer deployment ---"

# Read Terraform binary path
TERRAFORM_BINARY=$(yq e '.tf-config.binary_path // "terraform"' "$CONFIG_FILE")
echo "Using Terraform binary: $TERRAFORM_BINARY"

# --- MODIFIED: Generate tfvars for PyGitServer ---
# Extract simple key-value pairs from kubernetes and pygitserver-deployment sections
TF_VARS_SIMPLE=$(yq e '
  (.pygitserver-deployment | del(.repos) | to_entries | .[] | "\(.key) = \(.value | to_string | to_json)"),
  (.kubernetes | to_entries | .[] | "\(.key) = \(.value | to_string | to_json)")
' "$CONFIG_FILE")

# Extract the 'repos' list as a JSON string, which is valid HCL syntax
TF_VARS_REPOS=$(yq e '.pygitserver-deployment.repos | "repos = " + ( . | to_json )' "$CONFIG_FILE")

# Combine and write to the tfvars file
cat > "$TF_MODULE_PATH/$TFVARS_FILE" <<EOF
# This file was automatically generated by the deployment script
# DO NOT EDIT MANUALLY!

$TF_VARS_SIMPLE

$TF_VARS_REPOS
EOF

echo "Generated $TF_MODULE_PATH/$TFVARS_FILE:"
cat "$TF_MODULE_PATH/$TFVARS_FILE"

# --- Run Terraform Deployment ---
echo "--- Running Terraform in $TF_MODULE_PATH ---"

pushd "$TF_MODULE_PATH" > /dev/null

echo "Running: $TERRAFORM_BINARY init"
if ! $TERRAFORM_BINARY init; then
    echo "Terraform initialization failed."
    popd > /dev/null
    exit 1
fi

echo "Running: $TERRAFORM_BINARY apply -var-file=$TFVARS_FILE -auto-approve"
if ! $TERRAFORM_BINARY apply -var-file="$TFVARS_FILE" -auto-approve; then
    echo "Terraform deployment failed."
    popd > /dev/null
    exit 1
fi

popd > /dev/null
echo "--- PyGitServer deployment via Terraform completed successfully! ---"

# --- Add PyGitServer to /etc/hosts via Ingress ---
echo "--- Adding PyGitServer Ingress entry to $HOSTS_FILE ---"

# MODIFIED: Read variables from the pygitserver-deployment section
GIT_URL=$(yq e '.pygitserver-deployment.git_url' "$CONFIG_FILE")
GIT_NAMESPACE=$(yq e '.pygitserver-deployment.git_namespace' "$CONFIG_FILE")
GIT_RELEASE_NAME=$(yq e '.pygitserver-deployment.git_release_name' "$CONFIG_FILE")

# The Ingress name is the same as the Helm release name
INGRESS_NAME="${GIT_RELEASE_NAME}-pygitserver"

echo "Waiting for Ingress '$INGRESS_NAME' to get an IP address..."
INGRESS_IP=""
MAX_RETRIES=20
RETRY_DELAY=10

for i in $(seq 1 $MAX_RETRIES); do
    INGRESS_IP=$(kubectl get ingress "$INGRESS_NAME" -n "$GIT_NAMESPACE" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null | tr -d '[:space:]' || \
                 kubectl get ingress "$INGRESS_NAME" -n "$GIT_NAMESPACE" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null | tr -d '[:space:]' || echo "")

    if [ -n "$INGRESS_IP" ]; then
        echo "Ingress IP found: $INGRESS_IP"
        break
    fi
    echo "Attempt $i/$MAX_RETRIES: Ingress IP not yet available. Waiting $RETRY_DELAY seconds..."
    sleep $RETRY_DELAY
done

if [ -z "$INGRESS_IP" ]; then
    echo "Error: Ingress did not get an IP address within the timeout."
    echo "Please ensure an Ingress Controller is running in your cluster."
    exit 1
fi

HOSTS_ENTRY="$INGRESS_IP $GIT_URL"

append_to_hosts "$HOSTS_START_TAG"
append_to_hosts "# PyGitServer Dev Lab Entry - automatically added by script"
append_to_hosts "$HOSTS_ENTRY"
append_to_hosts "$HOSTS_END_TAG"

echo "Added '$HOSTS_ENTRY' to $HOSTS_FILE."
echo "PyGitServer should now be accessible. Example repo URL: http://$GIT_URL/my-first-repo.git"
echo "--- Host File Update Complete! ---"



echo "--- Full Deployment Workflow Complete! ---"